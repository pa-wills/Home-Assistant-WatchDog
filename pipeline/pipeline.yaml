#
#

AWSTemplateFormatVersion: 2010-09-09
Description: This stack represents the pipeline for my HeartBeat API application.

# Params are then entered directly into the GUI at stack-create/update time.
Parameters:
  AppName:
    Type: String
    Description: Name of the application.
    MinLength: "1"
    MaxLength: "80"
    AllowedPattern: "[A-Za-z0-9-]+"
    Default: HomeAssistantWatchDogPipeline
    ConstraintDescription: Malformed input parameter. AppName must only contain upper and lower case letters, numbers, and -.
  EnvironmentType:
    Description: "Environment Type"
    Default: "Prod"
    Type: String
    AllowedValues: ["Prod", "Test", "Dev"]
    ConstraintDescription: "Must specify either Prod, Test or Dev"
  GitHubFullRepoID:
    Type: String
    Description: "The GitHub repo name"
    Default: pa-wills/Home-Assistant-WatchDog
  GitHubRepoBranch:
    Type: String
    Description: "The GitHub repo branch code pipelines should watch for changes on."
    Default: dev
  CodeStarSourceConnectionArn:
    Type: String
    Description: "The ARN of the existing connection back into Github."
    Default: "arn:aws:codestar-connections:ap-southeast-2:623056247312:connection/e23152ba-62a3-4321-93a5-314cf6858b87"  
  ProductionCfnRoleArn:
    Type: String
    Description: "The Role that will be assumed by CloudFormation in order to deploy production resources."
    Default: "arn:aws:iam::732786819153:role/cf-execution-role-prod"
  ProductionCodePipelineRoleArn:
    Type: String
    Description: "The Role that will be assumed by the CodePipeline in order to execute the Production stage."
    Default: "arn:aws:iam::732786819153:role/cross-account-role-prod"

Resources:

  ProjectPipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: [CodePipelineServiceRole, CodeBuildProject]
    Description: The pipeline. Kind of the core of things, really.
    Properties:
      ArtifactStore:
        EncryptionKey:
          Id: !GetAtt PipelineEncryptionKey.Arn
          Type: KMS 
        Location: !Ref PipelineOutputBucket
        Type: S3
      RoleArn: !GetAtt
        - CodePipelineServiceRole
        - Arn
      Stages:
      - Name: Source
        Actions:
        - Name: source
          InputArtifacts: []
          ActionTypeId:
            Version: "1"
            Category: Source
            Owner: AWS
            Provider: CodeStarSourceConnection
          OutputArtifacts:
          - Name: "SourceArtifact"
          Configuration:
            ConnectionArn: !Ref CodeStarSourceConnectionArn
            FullRepositoryId: !Ref GitHubFullRepoID
            BranchName: !Ref GitHubRepoBranch
            OutputArtifactFormat: "CODE_ZIP"
          RunOrder: 1
      - Name: Production
        Actions:
        - Name: build-app
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: "1"
            Provider: CodeBuild
          Configuration:
            ProjectName: !Ref CodeBuildProject
          InputArtifacts:
          - Name: "SourceArtifact"
          OutputArtifacts:
          - Name: "BuildArtifact"
          RunOrder: 1
        - Name: create-update-stack
          InputArtifacts:
          - Name: "BuildArtifact"
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: "1"
            Provider: CloudFormation
          OutputArtifacts: []
          Configuration:
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
            ChangeSetName: pipeline-changeset-prod
            RoleArn: !Ref ProductionCfnRoleArn
            StackName: HomeAssistantWatchDog-Prod
            TemplatePath: "BuildArtifact::api/packaged-template.yaml"
#            TemplateConfiguration: !If [ HasStagingVariables, !Sub "${AppName}-BuildArtifact::${StagingFile}", "" ]
          RoleArn: !Ref ProductionCodePipelineRoleArn
          RunOrder: 2 # Need one of these on each action. Otherwise - confusing errors relating to input / output artifacts.
        - Name: pvt
          InputArtifacts:
          - Name: "SourceArtifact"
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: "1"
            Provider: CodeBuild
          OutputArtifacts: []
          Configuration:
            ProjectName: !Ref CodeBuildProject2
          RunOrder: 3

  # Build sub-stage (first of two CodeBuild Objects).
  CodeBuildProject:
    Description: This is the build sub-stage. Uses sam build / package to create .zips of the lambdas, etc.
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: "Build action."
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref PipelineOutputBucket
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0 # Using a modern image, matters. Got stuck on this for ages.
        Type: LINUX_CONTAINER
      Name: !Sub "${AppName}-build"
      ServiceRole: !GetAtt
        - CodeBuildTrustRole
        - Arn
      Source:
        BuildSpec: api/buildspec.yml
        Type: CODEPIPELINE
      Tags:
        - Key: app-name
          Value: !Ref AppName
      TimeoutInMinutes: 5

  # TODO: just use a Lambda. Codebuild is overkill.
  # PVT sub-stage (second of two CodeBuild Objects).
  CodeBuildProject2:
    Description: This is the PVT sub-stage. Invokes my smoke tester, and that's it.
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: !Sub "PVT action for ${AppName}."
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: APP_NAME
            Value: !Ref AppName
          - Name: ENV_NAME
            Value: !Ref EnvironmentType
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0 # Using a modern image, matters. Got stuck on this for ages.
        Type: LINUX_CONTAINER
      Name: !Sub "${AppName}-pvt"
      ServiceRole: !GetAtt
        - CodeBuildTrustRole
        - Arn
      Source:
        BuildSpec: api/pvtspec.yml
        Type: CODEPIPELINE
      Tags:
        - Key: app-name
          Value: !Ref AppName
      TimeoutInMinutes: 5

  PipelineOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Status: Enabled
            ExpirationInDays: 90
            Transitions:
              - TransitionInDays: 30
                StorageClass: GLACIER
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  PipelineOutputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:  
      Bucket: !Ref PipelineOutputBucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ["s3:*"]
          Resource:
          - !Sub "arn:aws:s3:::${PipelineOutputBucket}"
          - !Sub "arn:aws:s3:::${PipelineOutputBucket}/*"
          Principal:
            AWS:
            - !GetAtt CodePipelineServiceRole.Arn
            - !Sub "arn:aws:iam::494507141278:role/cross-account-role-devtest" # TODO: parameterise for portability.
            - !Sub "arn:aws:iam::494507141278:role/cf-execution-role-devtest" # TODO: parameterise for portability.
            - !Sub "arn:aws:iam::732786819153:role/cross-account-role-prod" # TODO: parameterise for portability.
            - !Sub "arn:aws:iam::732786819153:role/cf-execution-role-prod" # TODO: parameterise for portability.

  # TODO: I am probably going to have multiple pipelines, and I don't want one Key for each.
  # So, perhaps break this out into a shared services stack w/in this CICD account.
  PipelineEncryptionKey:
    DeletionPolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      Description: Key for SSE-KMS on the Pipeline Bucket.
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: 2012-10-17
        Id: keyForPipelineArtifactEncryption
        Statement:
          - Sid: "Allow access through S3 for all principals in accounts needing to use the bucket."
            Principal: 
              AWS: "*"
            Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource:
              - "*"
            #Condition:
              # TODO: where caller accounts, and Via service???
          - Sid: "Allow administration of the key."
            Principal: 
              AWS: [
                "arn:aws:iam::623056247312:root", 
                "arn:aws:iam::623056247312:role/aws-reserved/sso.amazonaws.com/ap-southeast-2/AWSReservedSSO_AWSAdministratorAccess_40a020b2fd86f86c"
              ]
              # TODO: use intrinsic function to get the account id.
            Effect: Allow
            Action:
              - kms:*
            Resource:
              - "*"
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT

  CodeBuildTrustRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub "${AppName}-CodeBuildRolePolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
                Resource: ["*"]
              - Effect: Allow
                Action:
                  - 'apigateway:*'
                  - 'dynamodb:*'
                  - 'events:*'
                  - 'iam:*'
                  - 'lambda:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                Resource: '*'

  # The creating user needs to have IAM::PassRole in order to make this work.
  CloudFormationTrustRole:
    Description: Creating service role in IAM for AWS CloudFormation
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub "${AppName}-CloudFormationRolePolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'apigateway:*'
                  - 'dynamodb:*'
                  - 'events:*'
                  - 'iam:*'
                  - 'lambda:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                Resource: '*'

  # TODO: least-priv this.
  # Adapted from: https://github.com/awsdocs/aws-doc-sdk-examples/blob/master/cloudformation/codepipeline/template-codepipeline-github-events-yaml.yml
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub "${AppName}-CodePipelineRolePolicy2"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codestar-connections:UseConnection'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sts:AssumeRole'
                Resource: 
                  - !Ref ProductionCodePipelineRoleArn
              - Effect: Allow
                Action:
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'rds:*'
                  - 'sqs:*'
                  - 'ecs:*'
                Resource: '*'


