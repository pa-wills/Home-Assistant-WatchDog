AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  HeartbeatCheckPeriodParameter:
    Type: String
    Default: rate(20 minutes) 

Resources:

  # DynamoDB
  HomeAssistantHeartBeatDyDB:
    Type: AWS::Serverless::SimpleTable
    Properties: 
      PrimaryKey:
        Name: ID
        Type: String
      TableName: HomeAssistantHeartBeat

  # EventBridge
  scheduleCheckHeartbeat:
    DependsOn: [onCheckHeartbeatRecency]
    Type: AWS::Events::Rule
    Properties:
      Description: 'This is the trigger for the HB-checking lambda'
      ScheduleExpression:
        Ref: HeartbeatCheckPeriodParameter
      State: ENABLED
      Targets: 
        -
          Arn: !GetAtt onCheckHeartbeatRecency.Arn
          Id: 1234IDeclareAEBWar


  # Lambdas
  onHeartbeatFromHomeAssistant:
    Type: AWS::Serverless::Function
    DependsOn: HeartbeatDatabaseAllAccessRole
    Properties:
      Handler: onHeartbeatFromHomeAssistant.lambda_handler
      CodeUri: . 
      Description: 'The hearbeat handler function'
      MemorySize: 256
      Timeout: 5
      Role: !GetAtt HeartbeatDatabaseAllAccessRole.Arn
      Runtime: python3.9
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /heartbeat
            Method: get

  onCheckHeartbeatRecency:
    Type: AWS::Serverless::Function
    DependsOn: HeartbeatDatabaseAllAccessRole
    Properties:
      Handler: onCheckHeartbeatRecency.lambda_handler
      CodeUri: . 
      Description: 'The hearbeat time-checker handler function'
      MemorySize: 256
      Timeout: 5
      Role: !GetAtt HeartbeatDatabaseAllAccessRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          NOTIFICATION_MESSAGE: "No recent heartbeat from Home Assistant."

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "onCheckHeartbeatRecency"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "scheduleCheckHeartbeat"
          - "Arn"

  # Roles
  HeartbeatDatabaseAllAccessRole:
    Type:  AWS::IAM::Role
    Properties:
      RoleName: HeartbeatDatabaseAllAccess
      Description: Allows Lambda functions to call AWS services on your behalf.
      Path: /
      # Unsure what this does?
      # https://devops.stackexchange.com/questions/5094/what-is-the-purpose-of-assumerolepolicydocument-in-iam/5099
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SNSRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:*'
                  - 'sns:*'
                Resource: '*'
  
  # SNS
  HeartbeatNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      FifoTopic: false
      Subscription:
        - Endpoint: "+61457805418"
          Protocol: "sms"



